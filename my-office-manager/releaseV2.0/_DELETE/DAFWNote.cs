using System;
using System.Collections.Generic;
using System.Text;
using ProtocolVN.Framework.Core;
using System.Data;
using System.Data.Common;

namespace ProtocolVN.Framework.Win
{
    #region TABLE FW_NOTE
//    /******************************************************************************/
///***              Generated by IBExpert 7/17/2010 11:17:26 AM               ***/
///******************************************************************************/



///******************************************************************************/
///***                                 Tables                                 ***/
///******************************************************************************/



//CREATE TABLE FW_NOTE (
//    ID        A_BIG_ID NOT NULL /* A_BIG_ID = BIGINT */,
//    USERID    A_BIG_ID /* A_BIG_ID = BIGINT */,
//    NOI_DUNG  IMAGE /* IMAGE = BLOB SUB_TYPE 0 SEGMENT SIZE 80 */
//);




///******************************************************************************/
///***                              Primary Keys                              ***/
///******************************************************************************/

//ALTER TABLE FW_NOTE ADD CONSTRAINT PK_FW_NOTE PRIMARY KEY (ID);


///******************************************************************************/
///***                               Privileges                               ***/
///******************************************************************************/

    #endregion

    public class DAFWNote :DAPhieu<DOFWNote>
    {
        public static DAFWNote I = new DAFWNote();
        public static string TABLE_MAP = "FW_NOTE";
        private static string KEY_FIELD_NAME = "ID";
        object[] FIELD_MAP = new object[] { 
            "ID",new IDConverter(),
            "USERID",new IDConverter(),
            "NOI_DUNG",null
        };

        private DAFWNote() : base() { }

        public override DataTypeBuilder DefineDetailDataTypeBuilder()
        {
            return null;
        }

        public override DOFWNote LoadAll(long IDKey)
        {
            DOFWNote Obj = this.Load(IDKey);
            Obj.DataSetMaster = DatabaseFB.LoadDataSet(TABLE_MAP, KEY_FIELD_NAME, IDKey);
            return Obj;
        }

        public override bool UpdateDetail(System.Data.DataSet Detail, System.Data.DataSet Grid)
        {
            return true;
        }

        public override bool ValidateDetail(System.Data.DataRow row)
        {
            return true;
        }

        public override DataTypeBuilder DefineDataTypeBuilder()
        {
            return new DataTypeBuilder(FIELD_MAP);
        }

        public override bool Delete(long IDKey)
        {
            return FWDBService.DeleteRecord(TABLE_MAP, KEY_FIELD_NAME, IDKey);
        }

        public override DOFWNote Load(long IDKey)
        {
            IDataReader reader = FWDBService.LoadRecord(TABLE_MAP, KEY_FIELD_NAME, IDKey);
            using (reader)
            {
                if (reader.Read())
                {
                    DOFWNote data = (DOFWNote)this.Builder.CreateFilledObjectExt(typeof(DOFWNote), reader);

                    return data;
                }
            }
            return new DOFWNote();
        }

        public override bool Update(DOFWNote data)
        {
            bool flag = false;
            DatabaseFB db = HelpDB.getDatabase();
            DbTransaction dbTrans = db.BeginTransaction(db.OpenConnection());
            try
            {
                DataSet MainDS = DatabaseFB.LoadDataSet(TABLE_MAP, KEY_FIELD_NAME, data.ID);
                if (MainDS.Tables[0].Rows.Count == 1)
                {
                    HelpDataSet.UpdataDataRowExt(MainDS.Tables[0].Rows[0], FIELD_MAP, data);
                    flag = db.UpdateDataSet(MainDS, dbTrans);
                }
                else //Thêm mới
                {
                    data.ID = db.GetID(HelpGen.G_FW_DT_ID,dbTrans);
                    DataRow row = MainDS.Tables[0].NewRow();
                    row[KEY_FIELD_NAME] = data.ID;
                    HelpDataSet.UpdataDataRowExt(row, FIELD_MAP, data);
                    MainDS.Tables[0].Rows.Add(row);
                    flag = db.UpdateDataSet(MainDS, dbTrans);
                }
                db.CommitTransaction(dbTrans);
            }
            catch (Exception ex)
            {
                flag = false;
                db.RollbackTransaction(dbTrans);
                PLException.AddException(ex);
            }
            return flag;
        }

        public override bool Validate(DOFWNote element)
        {
            return true;
        }

        public DOFWNote LoadFromUser(long UserID) {
            IDataReader reader = FWDBService.LoadRecord(TABLE_MAP, "USERID", UserID);
            using (reader)
            {
                if (reader.Read())
                {
                    DOFWNote data = (DOFWNote)this.Builder.CreateFilledObjectExt(typeof(DOFWNote), reader);

                    return data;
                }
            }
            return new DOFWNote();
        }

        public DOFWNote LoadAllFromUser(long UserID) {
            DOFWNote Obj = this.LoadFromUser(UserID);
            Obj.DataSetMaster = DatabaseFB.LoadDataSet(TABLE_MAP, "USERID", UserID);
            return Obj;
        }
    }
}
